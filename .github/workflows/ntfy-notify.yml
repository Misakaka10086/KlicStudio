name: Reusable ntfy Notification (All Config via Secrets)

on:
  workflow_call:
    inputs:
      branch_name:
        description: 'Optional: The name of the branch. Auto-detected if not provided.'
        required: false
        type: string
      commit_sha:
        description: 'Optional: The SHA of the commit. Auto-detected (github.sha) if not provided.'
        required: false
        type: string
      commit_message:
        description: 'Optional: The commit message. Auto-detected if not provided.'
        required: false
        type: string
      status:
        description: 'Status of the preceding job (e.g., success, failure)'
        required: false
        type: string
        default: 'triggered'
    secrets:
      NTFY_SERVER_URL: # Êñ∞Â¢û: ‰ªé Secrets Ëé∑ÂèñÊúçÂä°Âô® URL
        description: 'The URL of the ntfy server (e.g., https://ntfy.sh)'
        required: true
      NTFY_TOPIC_NAME: # Êñ∞Â¢û: ‰ªé Secrets Ëé∑ÂèñËØùÈ¢òÂêçÁß∞
        description: 'The ntfy topic name to send messages to'
        required: true
      NTFY_ACCESS_TOKEN:
        description: 'Access token for ntfy server (if topic is protected)'
        required: false

jobs:
  send_notification:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (if commit message needs git log)
        if: ${{ inputs.commit_message == '' && github.event_name != 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine Branch and Commit Info
        id: git_info
        env:
          INPUT_BRANCH: ${{ inputs.branch_name }}
          INPUT_SHA: ${{ inputs.commit_sha }}
          INPUT_MSG: ${{ inputs.commit_message }}
          GH_REF_NAME: ${{ github.ref_name }}
          GH_SHA: ${{ github.sha }}
          GH_EVENT_NAME: ${{ github.event_name }}
          GH_EVENT_HEAD_COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          FINAL_BRANCH_NAME="${INPUT_BRANCH:-$GH_REF_NAME}"
          FINAL_COMMIT_SHA="${INPUT_SHA:-$GH_SHA}"
          FINAL_COMMIT_MESSAGE="$INPUT_MSG"

          if [ -z "$FINAL_COMMIT_MESSAGE" ]; then
            if [ "$GH_EVENT_NAME" == "push" ] && [ -n "$GH_EVENT_HEAD_COMMIT_MSG" ]; then
              FINAL_COMMIT_MESSAGE="$GH_EVENT_HEAD_COMMIT_MSG"
            elif [ -d ".git" ]; then
              GIT_LOG_MSG=$(git log -1 --pretty=%B "$FINAL_COMMIT_SHA")
              if [ $? -eq 0 ]; then FINAL_COMMIT_MESSAGE="$GIT_LOG_MSG"; else
                echo "::warning::Failed to get commit message using git log for $FINAL_COMMIT_SHA."
                FINAL_COMMIT_MESSAGE="Commit message unavailable (git log failed)."
              fi
            else
              FINAL_COMMIT_MESSAGE="Commit message N/A (event: $GH_EVENT_NAME, no checkout)"
            fi
          fi
          echo "branch_name=$FINAL_BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "commit_sha=$FINAL_COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          echo "$FINAL_COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send ntfy Notification
        env:
          # ÊâÄÊúâ ntfy Áõ∏ÂÖ≥ÈÖçÁΩÆÁé∞Âú®ÈÉΩÊù•Ëá™ secrets
          NTFY_SERVER: ${{ secrets.NTFY_SERVER_URL }}
          NTFY_TOPIC: ${{ secrets.NTFY_TOPIC_NAME }}
          NTFY_TOKEN: ${{ secrets.NTFY_ACCESS_TOKEN }} # ÂèØËÉΩ‰∏∫Á©∫
          BRANCH_NAME: ${{ steps.git_info.outputs.branch_name }}
          COMMIT_SHA: ${{ steps.git_info.outputs.commit_sha }}
          COMMIT_MESSAGE: ${{ steps.git_info.outputs.commit_message }}
          STATUS: ${{ inputs.status }}
        run: |
          if [ -z "$NTFY_SERVER" ] || [ -z "$NTFY_TOPIC" ]; then
            echo "::error::NTFY_SERVER_URL or NTFY_TOPIC_NAME secret is not set or empty. Please configure them in repository Settings > Secrets and variables > Actions (Secrets)."
            exit 1
          fi

          EMOJI="üöÄ"; STATUS_TEXT_PREFIX=""
          if [ "$STATUS" == "success" ]; then EMOJI="‚úÖ"; STATUS_TEXT_PREFIX="Successful "; fi
          if [ "$STATUS" == "failure" ]; then EMOJI="‚ùå"; STATUS_TEXT_PREFIX="Failed "; fi
          if [ "$STATUS" == "cancelled" ]; then EMOJI="‚ö†Ô∏è"; STATUS_TEXT_PREFIX="Cancelled "; fi

          NTFY_NOTIFICATION_TITLE="${EMOJI} ${STATUS_TEXT_PREFIX}Event on ${BRANCH_NAME}"
          # Á°Æ‰øù COMMIT_MESSAGE ‰∏≠ÁöÑÊç¢Ë°åÁ¨¶Ë¢´Ê≠£Á°ÆÂ§ÑÁêÜ‰∏∫ ntfy Ê∂àÊÅØ‰Ωì‰∏≠ÁöÑÊç¢Ë°å
          # ‰ΩøÁî® printf Êù•ÊûÑÂª∫Ê∂àÊÅØ‰ΩìÂèØ‰ª•Êõ¥Â•ΩÂú∞Â§ÑÁêÜÁâπÊÆäÂ≠óÁ¨¶ÂíåÊç¢Ë°å
          COMMIT_MESSAGE_FORMATTED=$(printf '%s' "${COMMIT_MESSAGE}" | sed 's/$/\\n/')

          NTFY_MESSAGE_BODY="Branch: ${BRANCH_NAME}\nCommit: ${COMMIT_SHA:0:7}\n\nMessage:\n${COMMIT_MESSAGE_FORMATTED}"
          if [ "$STATUS" != "triggered" ]; then
              NTFY_MESSAGE_BODY="Status: ${STATUS}\n${NTFY_MESSAGE_BODY}"
          fi

          CURL_OPTS=("-s" "-X" "POST")
          CURL_OPTS+=("-H" "Title: ${NTFY_NOTIFICATION_TITLE}")

          if [ -n "$NTFY_TOKEN" ]; then
            CURL_OPTS+=("-H" "Authorization: Bearer ${NTFY_TOKEN}")
          fi

          if [ "$STATUS" == "failure" ]; then
            CURL_OPTS+=("-H" "Priority: high")
          elif [ "$STATUS" == "success" ]; then
             CURL_OPTS+=("-H" "Priority: default") # Or 'low' for just informational success
          fi
          CURL_OPTS+=("-H" "Tags: git,ci,${STATUS},${{ github.repository_owner }}")


          TARGET_URL="${NTFY_SERVER}/${NTFY_TOPIC}"

          echo "Sending notification to: $TARGET_URL"
          echo "Title: $NTFY_NOTIFICATION_TITLE"
          # echo "Body (raw): $NTFY_MESSAGE_BODY" # For debugging

          printf "%b" "${NTFY_MESSAGE_BODY}" | curl "${CURL_OPTS[@]}" \
            --data-binary @- \
            "${TARGET_URL}"

          if [ $? -ne 0 ]; then
            echo "::error::Failed to send ntfy notification."
            exit 1
          else
            echo "Notification sent successfully."
          fi