name: release

on:
  push:
    tags:
      - "v*"
      - "v*-*"

permissions:
  contents: write

jobs:
  build-desktop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install XGO
        run: |
          go install src.techknowlogick.com/xgo@latest
      
      - name: Pull Docker Image
        run: |
          docker pull ghcr.io/techknowlogick/xgo:latest

      - name: Get Version
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const rawTag = '${{ github.ref_name }}';
            const version = rawTag.replace(/^v/, '');
            core.setOutput('version', version);

      - name: Build Binary
        run: |
          targets=(
              "darwin amd64 _amd64 macOS"
              "darwin arm64 _arm64 macOS"
              "windows amd64 .exe Windows"
              "windows 386 _i386.exe Windows"
          )
          mkdir -p build

          for entry in "${targets[@]}"; do
            (
              IFS=' ' read -r -a parts <<< "$entry"
              os="${parts[0]}"
              arch="${parts[1]}"
              suffix="${parts[2]}"
              display_os="${parts[3]}"
              log_prefix="[${os}-${arch}]"
              target_dir="dist/${os}_${arch}"
              mkdir -p "$target_dir"
              echo "${log_prefix} 🚀 Building for $os/$arch..."
              xgo \
                  --targets="$os/$arch" \
                  --out "krillinai_desktop" \
                  --dest "$target_dir" \
                  ./cmd/desktop 2>&1 | sed "s/^/${log_prefix} /"
              binary_name="KrillinAI_${{ steps.version.outputs.version }}_Desktop_${display_os}${suffix}"
              mv "$target_dir"/krillinai_desktop* "build/$binary_name"
              echo "${log_prefix} ✅ Built: build/$binary_name"
            ) &
          done
          wait
          echo "✨ All concurrent tasks completed!"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-binaries # 给 artifact 一个明确的名称
          path: build/*
          retention-days: 1

  goreleaser:
    needs: build-desktop
    if: always() # 如果您希望仅在 build-desktop 成功时运行，可以改为 if: success()
    runs-on: ubuntu-latest
    steps:
      # QEMU 和 Buildx 主要用于 Docker 构建，如果仅发布到 GitHub Releases，则不再需要
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GoReleaser 需要完整的 git 历史来生成changelog

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: desktop-binaries # 使用上传时指定的 artifact 名称
          path: build # 将二进制文件下载到 build 目录，以便 GoReleaser 可以找到它们

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      # 移除了 Docker Hub 登录步骤
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # DOCKER_USERNAME 环境变量也不再需要
          # DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

  notify:
    runs-on: ubuntu-latest
    needs: goreleaser
    if: always()
    steps:
      - name: Send ntfy notification
        uses: ./.github/workflows/ntfy-notify.yml@main
        with:
          status: ${{ needs.build.outputs.build_status }}
        secrets: inherit # 这样会自动传递 NTFY_SERVER_URL, NTFY_TOPIC_NAME, NTFY_ACCESS_TOKEN
                        # (如果它们在调用方仓库/组织的 secrets 中存在)